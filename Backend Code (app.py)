
import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model
import cv2
from flask import Flask, request, jsonify
from werkzeug.utils import secure_filename
import base64

# Initialize the Flask app
app = Flask(__name__)

# Load the pre-trained autoencoder model
autoencoder = load_model("autoencoder_model.h5")
encoder = load_model("encoder_model.h5")

# Set the upload folder and allowed file types
UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg'}

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/process', methods=['POST'])
def process_image():
    if 'image' not in request.files:
        return jsonify({"error": "No file part"})
    
    file = request.files['image']
    if file.filename == '':
        return jsonify({"error": "No selected file"})
    
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(filepath)
        
        # Process the image
        img = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)
        img = cv2.resize(img, (28, 28))
        img = img.astype('float32') / 255.0
        img = img.flatten().reshape(1, 784)
        
        # Encode and decode user image
        decoded_img = autoencoder.predict(img)
        
        # Convert decoded image to base64 for display
        _, buffer = cv2.imencode('.png', decoded_img.reshape(28, 28) * 255)
        img_str = base64.b64encode(buffer).decode('utf-8')
        
        return jsonify({"reconstructed": img_str})

if __name__ == "__main__":
    app.run(debug=True)
